{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o","text":"<p>Este \u00e9 um projeto fict\u00edcio. A empresa, o contexto e as perguntas de neg\u00f3cios n\u00e3o s\u00e3o reais. Este portf\u00f3lio est\u00e1 seguindo as recomenda\u00e7\u00f5es da Comunidade DS. Ao enviar uma mensagem para a API, a resposta pode haver uma lentid\u00e3o para aparecer, pois, o Render depois de um tempo sem uso desliga a aplica\u00e7\u00e3o.</p> <p>O Banco UniiFance, uma institui\u00e7\u00e3o financeira l\u00edder e confi\u00e1vel, destaca-se no mercado pela sua dedica\u00e7\u00e3o em fornecer solu\u00e7\u00f5es de cr\u00e9dito acess\u00edveis e sob medida para empres\u00e1rios do setor comercial. Com foco em empr\u00e9stimos flex\u00edveis e acess\u00edveis, nossa equipe altamente qualificada trabalha em estreita colabora\u00e7\u00e3o com os clientes para atender \u00e0s suas necessidades financeiras espec\u00edficas.</p> <p>Atualmente o banco est\u00e1 passando por uma revis\u00e3o em como ele empresta o dinheiro para os seus clientes, assim o objetivo \u00e9 criar processos inteligentes para a previs\u00e3o de que algu\u00e9m pode vim a passar por dificuldades financeiras nos pr\u00f3ximos dois anos.</p>"},{"location":"#1-problema-de-negocios","title":"1 Problema de neg\u00f3cios","text":""},{"location":"#11-problema","title":"1.1 Problema","text":"<p>Um Banco Brasileiro contratou voc\u00ea como consultor em ci\u00eancia de dados. O diretor da \u00e1rea de empr\u00e9stimos para pessoa f\u00edsica, percebeu a diminui\u00e7\u00e3o do ROI(Return Over Investment Retorno sobre Investimento) devido a alta taxa de inadimpl\u00eancia.</p>"},{"location":"#12-motivacao","title":"1.2 Motiva\u00e7\u00e3o","text":"<p>O diretor da \u00e1rea de empr\u00e9stimos para pessoa f\u00edsica est\u00e1 com uma alta taxa percentual de inadimpl\u00eancia, afetando diretamente o ROI da empresa.</p>"},{"location":"#13-demandas-de-negocio","title":"1.3 Demandas de neg\u00f3cio","text":"<ul> <li>Qual perfil de um cliente adimplente?</li> <li>Qual vari\u00e1vel que mais impacta para o cliente ser inadimplente?</li> <li>Qual a contribui\u00e7\u00e3o individual de cada vari\u00e1vel para cada cliente ser inadimplente?</li> </ul>"},{"location":"#2-premissas-de-negocio","title":"2 Premissas de neg\u00f3cio","text":"<ul> <li>Todos os produtos de dados entregues devem ser acess\u00edveis via internet.</li> <li>O planejamento da solu\u00e7\u00e3o ser\u00e1 validado com os times de neg\u00f3cio, visando garantir que as solu\u00e7\u00f5es desenvolvidas sejam \u00fateis na sua tomada de decis\u00e3o.</li> <li>Ap\u00f3s responder as perguntas, o Diretor gostaria de construir uma aplica\u00e7\u00e3o que retorne a probabilidade do cliente ser inadimplente para que os analistas de empr\u00e9stimo possam simular alguns cen\u00e1rios de empr\u00e9stimos e tomar melhores decis\u00f5es.</li> </ul> <p>As variaveis do dataset original s\u00e3o:</p> Variavel Defini\u00e7\u00e3o id Um Id que representa uma linha dentro do conjunto de dados escolaridade Nivel de escolaridade do cliente renda_mensal Renda bruta mensal do cliente dependentes Informa se o cliente possui dependentes estado_civil O estado civil do cliente idade A idade do cliente na data do pedido de emprestimo conta_poupanca Informa se a conta \u00e9 poupan\u00e7a conta_salario Informa se a conta \u00e9 salario qtd_fonte_renda A quantidade de fonte de renda do cliente cheque_sem_fundo Informa se o cliente j\u00e1 passou cheque sem fundo conta_conjunta Informa se \u00e9 uma conta conjunta valor_conta_corrente A quantidade de dinheiro na conta corrente do cliente valor_conta_poupanca A quantidade de dineiro na conta poupan\u00e7a do cliente valor_emprestimo A quantia que o cliente pediu o emprestimo multa A multa aplica no emprestimo juros O juros aplicado no emprestimo valor_emprestimo_atualizado A soma do valor do emprestimo + multa + juros pago Informa se o cliente pagou o emprestimo genero Informa o genero do cliente data Data que o dataset foi fornecido estado Estado do cliente"},{"location":"#3-planejamento-da-solucao","title":"3 Planejamento da solu\u00e7\u00e3o","text":""},{"location":"#31-produto-final","title":"3.1 Produto final","text":"<p>O que ser\u00e1 entregue efetivamente?</p> <ul> <li>A uma API que recebe os dados do cliente e retorna a probabilidade de Inadimplencia.</li> <li>Um painel para verificar se o cliente vai ser adimplente.</li> </ul>"},{"location":"#32-ferramentas","title":"3.2 Ferramentas","text":"<p>Quais ferramentas ser\u00e3o usadas no processo?</p> <ul> <li>Python;</li> <li>Visual Studio code;</li> <li>Jupyter Notebook;</li> <li>Git, Github;</li> <li>Streamlit;</li> <li>Docker, Docker compose;</li> <li>Cloud Render.</li> </ul>"},{"location":"#33-metodo-sape","title":"3.3 Metodo SAPE","text":""},{"location":"#saida","title":"Saida","text":"<ul> <li>Aplicativo que recebe os dados de clientes novos e retorna a probabilidade de Inadimpl\u00eancia junto com o impacto individual de cada vari\u00e1vel para tomada de decis\u00e3o.</li> <li>Relat\u00f3rio com todas as resposta das perguntas feitas pelo Diretor da \u00e1rea de empr\u00e9stimos.</li> </ul>"},{"location":"#processo","title":"Processo","text":"<ul> <li> <p>Baixar os dados e ler os dados</p> </li> <li> <p>Executar o processo de limpeza de dados como:</p> </li> <li>renomear colunas</li> <li>checagem de valores NA</li> <li>imputa\u00e7\u00e3o de valores NA</li> <li>renomear categorias</li> <li> <p>mudar de tipo de vari\u00e1vel, caso necess\u00e1rio</p> </li> <li> <p>Estat\u00edstica descritiva com visualiza\u00e7\u00e3o</p> </li> <li> <p>Cria\u00e7\u00e3o de hip\u00f3teses e valida\u00e7\u00e3o das mesmas</p> </li> <li> <p>An\u00e1lise explorat\u00f3ria</p> </li> <li>Univariada</li> <li> <p>Bivariada</p> </li> <li> <p>Prepara\u00e7\u00e3o dos dados para treinamento de modelos de Machine Learning (feature engineering)</p> </li> <li> <p>Sele\u00e7\u00e3o das vari\u00e1veis mais importantes</p> </li> <li>Treinamento de algoritmos de ML</li> <li>Tunagem de hyperpar\u00e2metros e cross validation</li> <li>Interpreta\u00e7\u00e3o dos modelos utilizando SHAP</li> <li>Compara\u00e7\u00e3o da performance dos modelos</li> <li>Escolha do modelo final</li> <li>Uso do modelo final para fazer predi\u00e7\u00f5es de novos dados em um aplicativo na web</li> </ul>"},{"location":"#entrada","title":"Entrada","text":"<ul> <li>Tabela de dados de clientes em .csv fornecidad pela empresa.</li> </ul>"},{"location":"#4-os-3-principais-insights-dos-dados","title":"4. Os 3 principais insights dos dados","text":""},{"location":"#1-clientes-com-dependentes-sao-em-media-15-mais-adimplentes","title":"1. Clientes com Dependentes s\u00e3o em m\u00e9dia 15% mais ADIMPLENTES.","text":"<ul> <li>Verdadeiro Clientes com dependentes s\u00e3o em m\u00e9dia 18% mais ADIMPLENTES.</li> </ul>"},{"location":"#2-clientes-que-pegaram-emprestimos-de-mais-de-rs20000-tem-tendencia-a-ser-inadimplentes","title":"2. Clientes que pegaram empr\u00e9stimos de mais de RS$20000 tem tend\u00eancia a ser INADIMPLENTES.","text":"<ul> <li>Verdadeiro Clientes que pegaram empr\u00e9stimos de mais de RS$20000 tem tend\u00eancia a ser INADIMPLENTES.</li> </ul>"},{"location":"#3-clientes-que-sao-solteiros-tem-uma-taxa-percentual-maior-de-inadimplencia-que-os-demais","title":"3. Clientes que s\u00e3o solteiros tem uma taxa percentual maior de INADIMPL\u00caNCIA que os demais.","text":"<ul> <li>FALSO Clientes que s\u00e3o solteiros tem um taxa de 89% de ser ADIMPLENTES.</li> </ul>"},{"location":"#5-resultados-para-o-negocio","title":"5. Resultados para o neg\u00f3cio","text":"<p>De acordo com os crit\u00e9rios definidos, foi feita uma previs\u00e3o de adimplencia. Como resultado para o neg\u00f3cio foram criados:</p> <ul> <li> <p>Uma API onde ser\u00e1 feita a previs\u00e3o.</p> </li> <li> <p>Um dashboard feito no streamlit para preve a adimplencia do cliente.</p> </li> <li> <p>Uma documenta\u00e7\u00e3o para o entendimento do projeto.</p> </li> </ul>"},{"location":"#6-conclusao","title":"6. Conclus\u00e3o","text":"<p>O objetivo foi alcan\u00e7ado, dado que o produto de dados foram gerados com sucesso. O funcionario pode utilizar a ferramenta criado para fazer a previs\u00e3o para a tomada de dicis\u00e3o de emprestimo.</p> <p>O dashboard pode ser acessado por aqui</p> <ul> <li>Foi construida uma documenta\u00e7\u00e3o com o problema a ser resolvido e detalhes das classes aqui.</li> </ul>"},{"location":"#7-proximos-passos","title":"7. Pr\u00f3ximos passos","text":"<ul> <li>Aprimorar a apresenta\u00e7\u00e3o do painel, pois sua disposi\u00e7\u00e3o atual pode n\u00e3o ser intuitiva.</li> <li>Exibir os resultados acima do painel, em vez de destac\u00e1-los dentro do menu em verde.</li> </ul>"},{"location":"app/","title":"APP","text":"App"},{"location":"app/#app.src.app.run","title":"<code>run()</code>","text":"<p>Fun\u00e7\u00e3o principal que executa o aplicativo.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>app/src/app.py</code> <pre><code>def run() -&gt; None:\n    \"\"\"\n    Fun\u00e7\u00e3o principal que executa o aplicativo.\n\n    Returns:\n        None\n    \"\"\"\n    st.title(\"APP Previs\u00e3o de Inadimpl\u00eancia Banc\u00e1ria\")\n    data = input_cliente()\n\n    if st.sidebar.button(\"Predict\"):\n        prediction, probability, shap_output = predict(data)\n        st.sidebar.success(\n            f\"A predi\u00e7\u00e3o do modelo: {prediction} / probabilidade de Inadimpl\u00eancia = {probability}\"\n        )\n        display_shap_plot(shap_output, data)\n\n    df_csv = input_csv()\n    if df_csv is not None:\n        display_predictions(df_csv)\n</code></pre>"},{"location":"app/#app.src.app.input_cliente","title":"<code>input_cliente()</code>","text":"<p>Fun\u00e7\u00e3o para coletar as informa\u00e7\u00f5es do cliente a partir do sidebar.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>Um objeto contendo as informa\u00e7\u00f5es do cliente.</p> Source code in <code>app/src/app.py</code> <pre><code>def input_cliente() -&gt; dict:\n    \"\"\"\n    Fun\u00e7\u00e3o para coletar as informa\u00e7\u00f5es do cliente a partir do sidebar.\n\n    Returns:\n        Dict: Um objeto contendo as informa\u00e7\u00f5es do cliente.\n    \"\"\"\n    st.sidebar.header(\"Input informa\u00e7\u00f5es do cliente\")\n    dependentes = st.sidebar.selectbox(\"Tem dependentes?\", [\"S\", \"N\"])\n    estado_civil = st.sidebar.selectbox(\n        \"Qual Estado Civil?\",\n        [\n            \"solteiro \",\n            \"casado(a) com comunhao de bens\",\n            \"casado(a) com comunhao parcial de bens\",\n            \"casado(a) com separacao de bens\",\n            \"divorciado\",\n            \"separado judicialmente\",\n            \"viuvo(a)\",\n            \"outros\",\n        ],\n    )\n    idade = st.sidebar.number_input(\"Idade\", min_value=18, max_value=130)\n    cheque_sem_fundo = st.sidebar.selectbox(\n        \"J\u00e1 passou cheque sem fundo?\", [\"S\", \"N\"]\n    )\n    valor_emprestimo = st.sidebar.number_input(\n        \"Valor do Empr\u00e9stimo\", min_value=0.00\n    )\n    return {\n        \"dependentes\": dependentes,\n        \"estado_civil\": estado_civil,\n        \"idade\": idade,\n        \"cheque_sem_fundo\": cheque_sem_fundo,\n        \"valor_emprestimo\": valor_emprestimo,\n    }\n</code></pre>"},{"location":"app/#app.src.app.predict","title":"<code>predict(data)</code>","text":"<p>Fun\u00e7\u00e3o para fazer a previs\u00e3o usando os dados fornecidos.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Um dicion\u00e1rio contendo as informa\u00e7\u00f5es do cliente.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>Uma tupla contendo a previs\u00e3o, a probabilidade de inadimpl\u00eancia e a sa\u00edda SHAP.</p> Source code in <code>app/src/app.py</code> <pre><code>def predict(data: dict) -&gt; tuple:\n    \"\"\"\n    Fun\u00e7\u00e3o para fazer a previs\u00e3o usando os dados fornecidos.\n\n    Args:\n        data (dict): Um dicion\u00e1rio contendo as informa\u00e7\u00f5es do cliente.\n\n    Returns:\n        tuple: Uma tupla contendo a previs\u00e3o, a probabilidade de inadimpl\u00eancia e a sa\u00edda SHAP.\n    \"\"\"\n    filtered_data = {\n        col: data[col] for col in config[\"model_columns\"][\"x_columns\"]\n    }\n    response = requests.post(URL_PREDICT, json=filtered_data)\n    prediction = response.json()[\"resultado\"]\n    probability = response.json()[\"probabilidade\"]\n    shap_output = response.json()[\"shap_output\"]\n    return prediction, probability, shap_output\n</code></pre>"},{"location":"app/#app.src.app.display_shap_plot","title":"<code>display_shap_plot(shap_output, data)</code>","text":"<p>Fun\u00e7\u00e3o para exibir o gr\u00e1fico SHAP.</p> <p>Parameters:</p> Name Type Description Default <code>shap_output</code> <code>dict</code> <p>A sa\u00edda SHAP do modelo.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>app/src/app.py</code> <pre><code>def display_shap_plot(shap_output: dict, data: pd.DataFrame) -&gt; None:\n    \"\"\"\n    Fun\u00e7\u00e3o para exibir o gr\u00e1fico SHAP.\n\n    Args:\n        shap_output (dict): A sa\u00edda SHAP do modelo.\n\n    Returns:\n        None\n    \"\"\"\n    st.subheader(\"Gr\u00e1fico SHAP\")\n    values = np.array(shap_output[\"values\"][0])\n    base_value = shap_output[\"base_values\"]\n    feature_values = np.array(shap_output[\"data\"][0])\n    display_data = list(data.values())\n    feature_names = list(data.keys())\n    explainer = shap.Explanation(\n        values=values,\n        base_values=base_value,\n        data=feature_values,\n        feature_names=feature_names,\n        display_data=display_data,\n    )\n    fig, ax = plt.subplots()\n    shap.plots.waterfall(explainer, show=False)\n    st.pyplot(fig)\n</code></pre>"},{"location":"app/#app.src.app.input_csv","title":"<code>input_csv()</code>","text":"<p>Fun\u00e7\u00e3o para receber e processar um arquivo CSV de entrada.</p> <p>Returns:</p> Name Type Description <code>DataFrame</code> <code>DataFrame</code> <p>Um DataFrame contendo os dados do arquivo CSV.</p> Source code in <code>app/src/app.py</code> <pre><code>def input_csv() -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o para receber e processar um arquivo CSV de entrada.\n\n    Returns:\n        DataFrame: Um DataFrame contendo os dados do arquivo CSV.\n    \"\"\"\n    uploaded_file = st.sidebar.file_uploader(\n        \"Upload de CSV com informa\u00e7\u00f5es clientes\", key=\"2\"\n    )\n    if uploaded_file is not None:\n        df_csv = pd.read_csv(uploaded_file, sep=\",\")\n        json_df = json.dumps(\n            df_csv[config[\"model_columns\"][\"x_columns\"]].to_dict(\n                orient=\"records\"\n            )\n        )\n        response = requests.post(URL_PREDICT_FILE, json=json_df)\n        df_csv[\"predict\"] = json.loads(response.text)\n        df_csv[[\"predict\", \"prob_inadimplente\"]] = df_csv[\"predict\"].str.split(\n            \"-\", expand=True\n        )\n        return df_csv\n</code></pre>"},{"location":"app/#app.src.app.display_predictions","title":"<code>display_predictions(df_csv)</code>","text":"<p>Fun\u00e7\u00e3o para exibir as previs\u00f5es em uma tabela.</p> <p>Parameters:</p> Name Type Description Default <code>df_csv</code> <code>DataFrame</code> <p>O DataFrame contendo os dados e as previs\u00f5es.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>app/src/app.py</code> <pre><code>def display_predictions(df_csv: pd.DataFrame) -&gt; None:\n    \"\"\"\n    Fun\u00e7\u00e3o para exibir as previs\u00f5es em uma tabela.\n\n    Args:\n        df_csv (DataFrame): O DataFrame contendo os dados e as previs\u00f5es.\n\n    Returns:\n        None\n    \"\"\"\n    st.subheader(\"Tabela de Previs\u00f5es\")\n    st.dataframe(df_csv, 2000, 1000)\n    st.download_button(\n        label=\"Download CSV\",\n        data=df_csv.to_csv(index=False),\n        file_name=\"predic.csv\",\n        mime=\"text/csv\",\n    )\n</code></pre>"},{"location":"application/","title":"Modo de executar a aplica\u00e7\u00e3o","text":""},{"location":"application/#executando-a-aplicacao","title":"Executando a aplica\u00e7\u00e3o","text":"<p>H\u00e1 duas maneiras de executar a aplica\u00e7\u00e3o: usando Docker Compose ou executando diretamente os arquivos __main__.py entro das pastas api e app.</p>"},{"location":"application/#utilizando-docker-compose","title":"Utilizando Docker Compose","text":"<p>Antes de tudo, certifique-se de ter o Docker instalado em sua m\u00e1quina. Voc\u00ea pode instal\u00e1-lo seguindo a documenta\u00e7\u00e3o oficial do Docker Desktop.</p> <p>Com o Docker instalado, basta executar o comando <code>docker compose up</code> no terminal, dentro da pasta raiz do projeto. Isso construir\u00e1 a API e a aplica\u00e7\u00e3o no Streamlit. Em seguida, em um navegador de sua prefer\u00eancia, acesse <code>http://localhost:8501</code> para abrir a aplica\u00e7\u00e3o no Streamlit. </p> <p>Para encerrar a aplica\u00e7\u00e3o, pressione <code>Ctrl + C</code> no terminal ou feche-o.</p> <p>Para saber como utilizar, consulte a se\u00e7\u00e3o Modo de uso.</p>"},{"location":"application/#executando-o-arquivo-py","title":"Executando o arquivo .py","text":"<p>Para executar a aplica\u00e7\u00e3o, crie um ambiente virtual usando sua ferramenta preferida. A ferramenta utilizada neste caso foi o Poetry, com a vers\u00e3o do Python sendo 3.10.14.</p> <p>Ap\u00f3s a instala\u00e7\u00e3o do Poetry, na raiz do projeto, execute o comando <code>poetry install</code> para instalar todas as depend\u00eancias do projeto.</p> <p>Em um terminal, execute o comando <code>python api/__main_.py</code> ou <code>python api</code>. Isso iniciar\u00e1 o FastAPI. Mantenha este terminal aberto e, em um novo terminal, execute o comando <code>streamlit run app/__main__.py</code>. Se a p\u00e1gina n\u00e3o abrir automaticamente no seu navegador, acesse <code>http://localhost:8501</code>. </p> <p>Para encerrar a aplica\u00e7\u00e3o, pressione <code>Ctrl + C</code> no terminal ou feche-o. </p> <p>Para saber como utilizar, consulte a se\u00e7\u00e3o Modo de uso.</p>"},{"location":"dictionary/","title":"Dicionario de dados","text":"<p>Aqui est\u00e1 o dicion\u00e1rio de dados para os valores brutos do dataset:</p> <ol> <li> <p>id</p> <ul> <li>Descri\u00e7\u00e3o: Um ID que representa uma linha dentro do conjunto de dados.</li> <li>Tipo de Dados: Integer.</li> <li>Valores Permitidos: [309652396, 498764591, 504868288, ...].</li> </ul> </li> <li> <p>escolaridade</p> <ul> <li>Descri\u00e7\u00e3o: N\u00edvel de escolaridade do cliente.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: [nan, 'nivel medio', 'pos graducao', 'ensino superior'].</li> </ul> </li> <li> <p>renda_mensal_informal</p> <ul> <li>Descri\u00e7\u00e3o: Renda bruta mensal do cliente.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [nan, 1894.5078, 130.4699, ...].</li> </ul> </li> <li> <p>dependentes</p> <ul> <li>Descri\u00e7\u00e3o: Informa se o cliente possui dependentes.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>estado_civil</p> <ul> <li>Descri\u00e7\u00e3o: O estado civil do cliente.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['solteiro', 'casado(a) com comunhao de bens', 'casado(a) com comunhao parcial de bens', 'casado(a) com separacao de bens', 'divorciado', 'separado judicialmente', 'viuvo(a)', 'outros'].</li> </ul> </li> <li> <p>idade</p> <ul> <li>Descri\u00e7\u00e3o: A idade do cliente na data do pedido de empr\u00e9stimo.</li> <li>Tipo de Dados: Integer.</li> <li>Valores Permitidos: [36, 39, 26, 23, ...].</li> </ul> </li> <li> <p>conta_poupanca</p> <ul> <li>Descri\u00e7\u00e3o: Informa se a conta \u00e9 poupan\u00e7a.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>conta_salario</p> <ul> <li>Descri\u00e7\u00e3o: Informa se a conta \u00e9 sal\u00e1rio.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>qtd_fonte_renda</p> <ul> <li>Descri\u00e7\u00e3o: A quantidade de fontes de renda do cliente.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [nan, 1., 2., 3.].</li> </ul> </li> <li> <p>cheque_sem_fundo</p> <ul> <li>Descri\u00e7\u00e3o: Informa se houve cheque sem fundo.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>conta_conjunta</p> <ul> <li>Descri\u00e7\u00e3o: Informa se a conta \u00e9 conjunta.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>valor_conta_corrente</p> <ul> <li>Descri\u00e7\u00e3o: Valor na conta corrente do cliente.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [nan].</li> </ul> </li> <li> <p>valor_conta_poupanca</p> <ul> <li>Descri\u00e7\u00e3o: Valor na conta poupan\u00e7a do cliente.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [nan].</li> </ul> </li> <li> <p>valor_emprestimo</p> <ul> <li>Descri\u00e7\u00e3o: Valor do empr\u00e9stimo solicitado pelo cliente.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [8174.32, 41775.63, 522940.27, ...].</li> </ul> </li> <li> <p>multa</p> <ul> <li>Descri\u00e7\u00e3o: Valor da multa associada ao empr\u00e9stimo.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [263.25, 1607.29, 24860.4, ...].</li> </ul> </li> <li> <p>juros</p> <ul> <li>Descri\u00e7\u00e3o: Valor dos juros associados ao empr\u00e9stimo.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [5.8449800e+03, 7.6522600e+03, 3.1931562e+05, ...].</li> </ul> </li> <li> <p>valor_emprestimo_atualizado</p> <ul> <li>Descri\u00e7\u00e3o: Valor atualizado do empr\u00e9stimo (principal + juros + multa).</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: [14282.55, 51035.18, 867116.29, ...].</li> </ul> </li> <li> <p>genero</p> <ul> <li>Descri\u00e7\u00e3o: G\u00eanero do cliente.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['feminino', 'masculino'].</li> </ul> </li> <li> <p>data</p> <ul> <li>Descri\u00e7\u00e3o: Data do registro.</li> <li>Tipo de Dados: String (formato de data).</li> <li>Valores Permitidos: ['2020-01-01'].</li> </ul> </li> <li> <p>estado</p> <ul> <li>Descri\u00e7\u00e3o: Estado onde o cliente est\u00e1 localizado.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['minas gerais', 'espirito santo', 'sao paulo', 'rio de janeiro'].</li> </ul> </li> <li> <p>pago</p> <ul> <li>Descri\u00e7\u00e3o: Indica se o empr\u00e9stimo foi pago ou n\u00e3o.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['sim', 'nao'].</li> </ul> </li> </ol>"},{"location":"process/","title":"API","text":"Process FastAPI"},{"location":"process/#api.src.process.DataProcess","title":"<code>api.src.process.DataProcess</code>","text":"<p>Classe para processamento de dados e gera\u00e7\u00e3o de previs\u00f5es.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>BaseEstimator</code> <p>Modelo de aprendizado de m\u00e1quina para previs\u00e3o.</p> <code>shap_model</code> <code>callable</code> <p>Modelo SHAP para gera\u00e7\u00e3o de feature importance explanations.</p> <code>th</code> <code>float</code> <p>Threshold para classifica\u00e7\u00e3o.</p> <code>columns</code> <code>list</code> <p>Lista de nomes de colunas usados no modelo.</p> <p>Methods:</p> Name Description <code>__init__</code> <p>Inicializa o DataProcess com modelo, modelo SHAP, Threshold e colunas.</p> <code>rename_columns</code> <p>Renomeia as colunas dos dados de entrada.</p> <code>predict_and_prepare_results</code> <p>Prev\u00ea classes e prepara resultados.</p> <code>transform_data</code> <p>Transforma os dados de entrada para a previs\u00e3o do modelo.</p> <code>calculate_shap_values</code> <p>Calcula os valores SHAP para os dados de entrada.</p> <code>prepare_output</code> <p>Prepara os dados de sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.</p> <code>process_data</code> <p>Processa os dados de entrada para gerar previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.</p> Source code in <code>api/src/process.py</code> <pre><code>class DataProcess:\n    \"\"\"\n    Classe para processamento de dados e gera\u00e7\u00e3o de previs\u00f5es.\n\n    Attributes:\n        model (sklearn.base.BaseEstimator): Modelo de aprendizado de m\u00e1quina para previs\u00e3o.\n        shap_model (callable): Modelo SHAP para gera\u00e7\u00e3o de feature importance explanations.\n        th (float): Threshold para classifica\u00e7\u00e3o.\n        columns (list): Lista de nomes de colunas usados no modelo.\n\n    Methods:\n        __init__: Inicializa o DataProcess com modelo, modelo SHAP, Threshold e colunas.\n        rename_columns: Renomeia as colunas dos dados de entrada.\n        predict_and_prepare_results: Prev\u00ea classes e prepara resultados.\n        transform_data: Transforma os dados de entrada para a previs\u00e3o do modelo.\n        calculate_shap_values: Calcula os valores SHAP para os dados de entrada.\n        prepare_output: Prepara os dados de sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.\n        process_data: Processa os dados de entrada para gerar previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\n        Inicializa o DataProcess com modelo, modelo SHAP, Threshold e colunas.\n        \"\"\"\n        path = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n\n        self.model = pickle.load(open(path + config[\"model\"][\"ml_path\"], \"rb\"))\n        self.shap_model = pickle.load(\n            open(path + config[\"model\"][\"shap_path\"], \"rb\")\n        )\n        self.th = config[\"model\"][\"threshold\"]\n        self.columns = config[\"model_columns\"][\"x_columns\"]\n\n    def rename_columns(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"\n        Renomeia as colunas dos dados de entrada.\n\n        Args:\n            data (pandas.DataFrame): Dados de entrada.\n\n        Returns:\n            pandas.DataFrame: Dados com colunas renomeadas.\n        \"\"\"\n        data_df = data.copy()\n        data_df.columns = self.columns\n        return data_df\n\n    def predict_and_prepare_results(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"\n        Prev\u00ea classes e prepara resultados.\n\n        Args:\n            data (pandas.DataFrame): Dados de entrada com colunas renomeadas.\n\n        Returns:\n            pandas.DataFrame: Dados com classes previstas e probabilidades.\n        \"\"\"\n        prob = self.model.predict_proba(data)[:, 1].astype(float)\n        data[\"predict\"] = (\n            self.model.predict_proba(data)[:, 1] &gt; self.th\n        ).astype(int)\n\n        data[\"resultado\"] = data[\"predict\"].apply(\n            lambda x: \"Adimplente\" if x == 0 else \"Inadimplente\"\n        )\n\n        data[\"prob_inadimplencia\"] = prob\n        data[\"predict\"] = data.apply(\n            lambda x: x[\"resultado\"]\n            + \"-\"\n            + str(round(x[\"prob_inadimplencia\"], 2)),\n            axis=1,\n        )\n        return data\n\n    def transform_data(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"\n        Transforma os dados de entrada para a previs\u00e3o do modelo.\n\n        Args:\n            data (pandas.DataFrame): Dados a serem transformados\n\n        Returns:\n            pandas.DataFrame: Dados transformados para a previs\u00e3o do modelo.\n        \"\"\"\n        data_pp1 = self.model.named_steps[\"rare_encoder\"].transform(data)\n        data_pp2 = self.model.named_steps[\"categorical_encoder\"].transform(\n            data_pp1\n        )\n        return data_pp2\n\n    def calculate_shap_values(self, data_pp: pd.DataFrame) -&gt; ShapOutput:\n        \"\"\"\n        Calcula os valores SHAP para os dados de entrada.\n\n        Args:\n            data_pp (numpy.ndarray): Dados transformados para a previs\u00e3o do modelo.\n\n        Returns:\n            ShapOutput: Valores SHAP a base SHAP e os dados\n        \"\"\"\n        shap_values = self.shap_model(data_pp)\n        values_list = (\n            shap_values.values.tolist()\n            if isinstance(shap_values.values, np.ndarray)\n            else shap_values.values\n        )\n        data_list = (\n            shap_values.data.tolist()\n            if isinstance(shap_values.data, np.ndarray)\n            else shap_values.data\n        )\n        shap_client = ShapOutput(\n            values=values_list,\n            base_values=shap_values.base_values,\n            data=data_list,\n        )\n        return shap_client\n\n    def prepare_output(\n        self,\n        data_df: pd.DataFrame,\n        shap_client: ShapOutput,\n        data_pp: pd.DataFrame,\n    ) -&gt; Union[Dict[str, Any], List[Any]]:\n        \"\"\"\n        Prepara os dados de sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.\n\n        Args:\n            data_df (pandas.DataFrame): Dados de entrada com classes previstas e probabilidades.\n            shap_client (ShapOutput): Valores SHAP e informa\u00e7\u00f5es relacionadas.\n            data_pp (pandas.DataFrame): Dados transformados para a previs\u00e3o do modelo.\n\n        Returns:\n            dict or list: Sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.\n        \"\"\"\n        if data_df.shape[0] == 1:\n            dict_shap = {\n                \"resultado\": data_df[\"resultado\"][0],\n                \"probabilidade\": round(data_df[\"prob_inadimplencia\"][0], 2),\n                \"shap_output\": shap_client.model_dump(),\n                \"feature_names_values\": data_pp.to_dict(orient=\"records\")[0],\n            }\n            return dict_shap\n        else:\n            return data_df[\"predict\"].tolist()\n\n    def process_data(self, data: pd.DataFrame) -&gt; Union[Dict[str, Any], List[Any]]:\n        \"\"\"\n        Processa os dados de entrada para gerar previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.\n\n        Args:\n            data (pandas.DataFrame): Dados de entrada.\n\n        Returns:\n            dict or list: Sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.\n        \"\"\"\n        data_df = self.rename_columns(data)\n        data_pp = self.transform_data(data)\n        data_df = self.predict_and_prepare_results(data_df)\n        shap_client = self.calculate_shap_values(data_pp)\n        return self.prepare_output(data_df, shap_client, data_pp)\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.__init__","title":"<code>__init__()</code>","text":"<p>Inicializa o DataProcess com modelo, modelo SHAP, Threshold e colunas.</p> Source code in <code>api/src/process.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\n    Inicializa o DataProcess com modelo, modelo SHAP, Threshold e colunas.\n    \"\"\"\n    path = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n\n    self.model = pickle.load(open(path + config[\"model\"][\"ml_path\"], \"rb\"))\n    self.shap_model = pickle.load(\n        open(path + config[\"model\"][\"shap_path\"], \"rb\")\n    )\n    self.th = config[\"model\"][\"threshold\"]\n    self.columns = config[\"model_columns\"][\"x_columns\"]\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.calculate_shap_values","title":"<code>calculate_shap_values(data_pp)</code>","text":"<p>Calcula os valores SHAP para os dados de entrada.</p> <p>Parameters:</p> Name Type Description Default <code>data_pp</code> <code>ndarray</code> <p>Dados transformados para a previs\u00e3o do modelo.</p> required <p>Returns:</p> Name Type Description <code>ShapOutput</code> <code>ShapOutput</code> <p>Valores SHAP a base SHAP e os dados</p> Source code in <code>api/src/process.py</code> <pre><code>def calculate_shap_values(self, data_pp: pd.DataFrame) -&gt; ShapOutput:\n    \"\"\"\n    Calcula os valores SHAP para os dados de entrada.\n\n    Args:\n        data_pp (numpy.ndarray): Dados transformados para a previs\u00e3o do modelo.\n\n    Returns:\n        ShapOutput: Valores SHAP a base SHAP e os dados\n    \"\"\"\n    shap_values = self.shap_model(data_pp)\n    values_list = (\n        shap_values.values.tolist()\n        if isinstance(shap_values.values, np.ndarray)\n        else shap_values.values\n    )\n    data_list = (\n        shap_values.data.tolist()\n        if isinstance(shap_values.data, np.ndarray)\n        else shap_values.data\n    )\n    shap_client = ShapOutput(\n        values=values_list,\n        base_values=shap_values.base_values,\n        data=data_list,\n    )\n    return shap_client\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.predict_and_prepare_results","title":"<code>predict_and_prepare_results(data)</code>","text":"<p>Prev\u00ea classes e prepara resultados.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dados de entrada com colunas renomeadas.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: Dados com classes previstas e probabilidades.</p> Source code in <code>api/src/process.py</code> <pre><code>def predict_and_prepare_results(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Prev\u00ea classes e prepara resultados.\n\n    Args:\n        data (pandas.DataFrame): Dados de entrada com colunas renomeadas.\n\n    Returns:\n        pandas.DataFrame: Dados com classes previstas e probabilidades.\n    \"\"\"\n    prob = self.model.predict_proba(data)[:, 1].astype(float)\n    data[\"predict\"] = (\n        self.model.predict_proba(data)[:, 1] &gt; self.th\n    ).astype(int)\n\n    data[\"resultado\"] = data[\"predict\"].apply(\n        lambda x: \"Adimplente\" if x == 0 else \"Inadimplente\"\n    )\n\n    data[\"prob_inadimplencia\"] = prob\n    data[\"predict\"] = data.apply(\n        lambda x: x[\"resultado\"]\n        + \"-\"\n        + str(round(x[\"prob_inadimplencia\"], 2)),\n        axis=1,\n    )\n    return data\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.prepare_output","title":"<code>prepare_output(data_df, shap_client, data_pp)</code>","text":"<p>Prepara os dados de sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.</p> <p>Parameters:</p> Name Type Description Default <code>data_df</code> <code>DataFrame</code> <p>Dados de entrada com classes previstas e probabilidades.</p> required <code>shap_client</code> <code>ShapOutput</code> <p>Valores SHAP e informa\u00e7\u00f5es relacionadas.</p> required <code>data_pp</code> <code>DataFrame</code> <p>Dados transformados para a previs\u00e3o do modelo.</p> required <p>Returns:</p> Type Description <code>Union[Dict[str, Any], List[Any]]</code> <p>dict or list: Sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.</p> Source code in <code>api/src/process.py</code> <pre><code>def prepare_output(\n    self,\n    data_df: pd.DataFrame,\n    shap_client: ShapOutput,\n    data_pp: pd.DataFrame,\n) -&gt; Union[Dict[str, Any], List[Any]]:\n    \"\"\"\n    Prepara os dados de sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.\n\n    Args:\n        data_df (pandas.DataFrame): Dados de entrada com classes previstas e probabilidades.\n        shap_client (ShapOutput): Valores SHAP e informa\u00e7\u00f5es relacionadas.\n        data_pp (pandas.DataFrame): Dados transformados para a previs\u00e3o do modelo.\n\n    Returns:\n        dict or list: Sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.\n    \"\"\"\n    if data_df.shape[0] == 1:\n        dict_shap = {\n            \"resultado\": data_df[\"resultado\"][0],\n            \"probabilidade\": round(data_df[\"prob_inadimplencia\"][0], 2),\n            \"shap_output\": shap_client.model_dump(),\n            \"feature_names_values\": data_pp.to_dict(orient=\"records\")[0],\n        }\n        return dict_shap\n    else:\n        return data_df[\"predict\"].tolist()\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.process_data","title":"<code>process_data(data)</code>","text":"<p>Processa os dados de entrada para gerar previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dados de entrada.</p> required <p>Returns:</p> Type Description <code>Union[Dict[str, Any], List[Any]]</code> <p>dict or list: Sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.</p> Source code in <code>api/src/process.py</code> <pre><code>def process_data(self, data: pd.DataFrame) -&gt; Union[Dict[str, Any], List[Any]]:\n    \"\"\"\n    Processa os dados de entrada para gerar previs\u00f5es e explica\u00e7\u00f5es do modelo SHAP.\n\n    Args:\n        data (pandas.DataFrame): Dados de entrada.\n\n    Returns:\n        dict or list: Sa\u00edda contendo previs\u00f5es e explica\u00e7\u00f5es.\n    \"\"\"\n    data_df = self.rename_columns(data)\n    data_pp = self.transform_data(data)\n    data_df = self.predict_and_prepare_results(data_df)\n    shap_client = self.calculate_shap_values(data_pp)\n    return self.prepare_output(data_df, shap_client, data_pp)\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.rename_columns","title":"<code>rename_columns(data)</code>","text":"<p>Renomeia as colunas dos dados de entrada.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dados de entrada.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: Dados com colunas renomeadas.</p> Source code in <code>api/src/process.py</code> <pre><code>def rename_columns(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Renomeia as colunas dos dados de entrada.\n\n    Args:\n        data (pandas.DataFrame): Dados de entrada.\n\n    Returns:\n        pandas.DataFrame: Dados com colunas renomeadas.\n    \"\"\"\n    data_df = data.copy()\n    data_df.columns = self.columns\n    return data_df\n</code></pre>"},{"location":"process/#api.src.process.DataProcess.transform_data","title":"<code>transform_data(data)</code>","text":"<p>Transforma os dados de entrada para a previs\u00e3o do modelo.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dados a serem transformados</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: Dados transformados para a previs\u00e3o do modelo.</p> Source code in <code>api/src/process.py</code> <pre><code>def transform_data(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Transforma os dados de entrada para a previs\u00e3o do modelo.\n\n    Args:\n        data (pandas.DataFrame): Dados a serem transformados\n\n    Returns:\n        pandas.DataFrame: Dados transformados para a previs\u00e3o do modelo.\n    \"\"\"\n    data_pp1 = self.model.named_steps[\"rare_encoder\"].transform(data)\n    data_pp2 = self.model.named_steps[\"categorical_encoder\"].transform(\n        data_pp1\n    )\n    return data_pp2\n</code></pre>"},{"location":"process/#api.src.main.predict","title":"<code>api.src.main.predict(data)</code>","text":"<p>Endpoint para previs\u00e3o de dados enviados via POST.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Dados de entrada.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict</code> <p>Resultados das previs\u00f5es.</p> Source code in <code>api/src/main.py</code> <pre><code>@app.post(config[\"api\"][\"path_predict\"])\ndef predict(data: Data)-&gt; Dict:\n    \"\"\"\n    Endpoint para previs\u00e3o de dados enviados via POST.\n\n    Args:\n        data (Data): Dados de entrada.\n\n    Returns:\n        dict: Resultados das previs\u00f5es.\n    \"\"\"\n    try:\n        data = pd.DataFrame.from_dict([data.model_dump()])\n        return DataProcess().process_data(data)\n    except Exception as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"process/#api.src.main.predict_file","title":"<code>api.src.main.predict_file(request)</code>  <code>async</code>","text":"<p>Endpoint para previs\u00e3o de dados enviados via POST como arquivo.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Requisi\u00e7\u00e3o HTTP.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>List[Any]</code> <p>Resultados das previs\u00f5es.</p> Source code in <code>api/src/main.py</code> <pre><code>@app.post(config[\"api\"][\"path_predict_file\"])\nasync def predict_file(request: Request) -&gt; List[Any]:\n    \"\"\"\n    Endpoint para previs\u00e3o de dados enviados via POST como arquivo.\n\n    Args:\n        request (Request): Requisi\u00e7\u00e3o HTTP.\n\n    Returns:\n        dict: Resultados das previs\u00f5es.\n    \"\"\"\n    try:\n        data = await request.json()\n        data = json.loads(data)\n        data = pd.json_normalize(data)\n\n        results = DataProcess().process_data(data)\n\n        return results\n    except Exception as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"utilizacao/","title":"Modo de uso","text":"<p>Essa sess\u00e3o mostra como utilizar a aplica\u00e7\u00e3o no streamlit e algumas informa\u00e7\u00f5es sobre a aplica\u00e7\u00e3o.</p> <p>Existe duas formas de utlizar a aplica\u00e7\u00e3o uma preenchendo as informa\u00e7\u00f5es do cliente na barra lateral  para verificar a adimplencia individualmente e outra fazendo o upload de um arquivo csv, vamos mostrar como utilizar as duas formas abaixo.</p>"},{"location":"utilizacao/#informacoes-necessarias","title":"Informa\u00e7\u00f5es necessarias","text":"<p>As informa\u00e7\u00f5es necessaria para funcionar a aplica\u00e7\u00e3o s\u00e3o:</p> <ul> <li> <p>dependentes</p> <ul> <li>Descri\u00e7\u00e3o: Informa se o cliente possui dependentes.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>estado civil</p> <ul> <li>Descri\u00e7\u00e3o: O estado civil do cliente.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['solteiro', 'casado(a) com comunhao de bens', 'casado(a) com comunhao parcial de bens', 'casado(a) com separacao de bens', 'divorciado', 'separado judicialmente', 'viuvo(a)', 'outros'].</li> </ul> </li> <li> <p>idade</p> <ul> <li>Descri\u00e7\u00e3o: A idade do cliente na data do pedido de empr\u00e9stimo.</li> <li>Tipo de Dados: Integer.</li> <li>Valores Permitidos: &gt; 18</li> </ul> </li> <li> <p>cheque sem fundo</p> <ul> <li>Descri\u00e7\u00e3o: Informa se houve cheque sem fundo.</li> <li>Tipo de Dados: String.</li> <li>Valores Permitidos: ['S', 'N'].</li> </ul> </li> <li> <p>valor emprestimo</p> <ul> <li>Descri\u00e7\u00e3o: Valor do empr\u00e9stimo solicitado pelo cliente.</li> <li>Tipo de Dados: Float.</li> <li>Valores Permitidos: &gt; 0.0</li> </ul> </li> </ul>"},{"location":"utilizacao/#preenchendo-as-informacoes","title":"Preenchendo as Informa\u00e7\u00f5es","text":"<p>Ap\u00f3s inserir os valores e acionar o bot\u00e3o de previs\u00e3o, os resultados da predi\u00e7\u00e3o ser\u00e3o exibidos abaixo do bot\u00e3o em verde, indicando se o indiv\u00edduo \u00e9 considerado adimplente ou inadimplente, juntamente com a probabilidade de inadimpl\u00eancia. \u00c9 importante destacar que consideramos como inadimplentes aqueles com uma probabilidade de inadimpl\u00eancia superior a 75%.</p> <p>Al\u00e9m disso, ser\u00e1 apresentado um gr\u00e1fico SHAP, o qual demonstrar\u00e1 a import\u00e2ncia das vari\u00e1veis para a decis\u00e3o da predi\u00e7\u00e3o, ordenadas da mais relevante para a menos relevante. Para uma compreens\u00e3o mais aprofundada do gr\u00e1fico SHAP, recomendamos a leitura do artigo.</p>"},{"location":"utilizacao/#fazendo-upload-de-um-arquivo-csv","title":"Fazendo upload de um arquivo csv","text":"<p>Para realizar o upload do arquivo, basta clicar em \"Browse files\" e selecionar o arquivo CSV desejado. Um exemplo de conjunto de dados pode ser encontrado no reposit\u00f3rio aqui. Assim como as informa\u00e7\u00f5es inseridas manualmente, as colunas necess\u00e1rias s\u00e3o as mesmas na se\u00e7\u00e3o de informa\u00e7\u00f5es necess\u00e1rias.</p>"}]}